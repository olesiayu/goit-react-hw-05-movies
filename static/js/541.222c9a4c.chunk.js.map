{"version":3,"file":"static/js/541.222c9a4c.chunk.js","mappings":"6OAIe,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAsBN,GAASO,MAAK,SAAAC,GAClCJ,GAAQ,OAAII,EAAOL,YAEpB,CAACH,KAGF,8BACGG,IACC,wBACGA,EAAKM,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,2BACE,gBACEC,IAAG,yCAAoCH,GACvCI,IAAKH,KAEP,uBAAIA,KACJ,uBAAIC,MANGH,Y,oLCnBfM,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,GAAD,OACxBF,EADwB,sCACcC,EADd,YAKxB,SAASW,EAAkBC,GAChC,OAAOX,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,kBACyBY,IAIjD,SAASC,EAAkBC,GAChC,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iBACPe,EADO,oBACad,IAIrC,SAASe,EAAYD,GAC1B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iBACPe,EADO,4BACqBd,IAI7C,SAASgB,EAAkBF,GAChC,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iBACPe,EADO,4BACqBd,M,8EChCrC,SAASiB,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["components/Cast/Cast.js","services/movies-api.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as moviesAPI from 'services/movies-api';\n\nexport default function Cast() {\n  const { movieID } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    moviesAPI.fetchActors(movieID).then(actors => {\n      setCast([...actors.cast]);\n    });\n  }, [movieID]);\n\n  return (\n    <>\n      {cast && (\n        <ul>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <li key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt={name}\n              />\n              <p>{name}</p>\n              <p>{character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '919ec07d97461f424c0dcb1ca8e5ed20';\n\nasync function fetchWithErrorHandling(url = '') {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularFims() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n}\n\nexport function fetchSearchMovies(searchQuery) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n}\n\nexport function fetchMovieDetails(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchActors(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieReviews(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}`\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["Cast","movieID","useParams","useState","cast","setCast","useEffect","moviesAPI","then","actors","map","id","profile_path","name","character","src","alt","BASE_URL","API_KEY","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","fetchPopularFims","fetchSearchMovies","searchQuery","fetchMovieDetails","movie_id","fetchActors","fetchMovieReviews","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}