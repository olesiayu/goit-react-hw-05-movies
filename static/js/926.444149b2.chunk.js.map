{"version":3,"file":"static/js/926.444149b2.chunk.js","mappings":"6OAIe,SAASA,IACtB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,IAAnC,eAAOM,EAAP,KAAcC,EAAd,KACMC,EAAcJ,EAAaK,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACJF,GACFG,EAAAA,GAA4BH,GAAaI,MAAK,SAAAC,GAC5CX,GAAe,OAAIW,EAAOC,eAG7B,CAACN,IAmBJ,OACE,iCACE,kBAAMO,SAfW,SAAAC,GAGnB,GAFAA,EAAMC,iBAEe,KAAjBX,EAAMY,OAGR,OAFAhB,EAAe,IACfG,EAAgB,IACTc,MAAM,wBAEfd,EAAgB,CAAEC,MAAAA,IAElBC,EAAS,KAKP,WACE,kBACEa,KAAK,OACLC,KAAK,QACLC,MAAOhB,EACPiB,SAxBkB,SAAAP,GACxBT,EAASS,EAAMQ,cAAcF,MAAMG,cAAcP,SAwB3CQ,aAAa,MACbC,WAAS,EACTC,YAAY,kBAGd,mBAAQR,KAAK,SAAb,UACE,0CAIHnB,IACC,wBACGA,EAAY4B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAb,SAAoBC,KADbD,a,oLCxDfG,EAAW,gCACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,yGAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAuB,GAAD,OACxBF,EADwB,sCACcC,EADd,YAKxB,SAASW,EAAkBrC,GAChC,OAAO2B,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,kBACyB1B,IAIjD,SAASsC,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,oBACab,IAIrC,SAASc,EAAYD,GAC1B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACqBb,IAI7C,SAASe,EAAkBF,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,iBACPc,EADO,4BACqBb,M,8EChCrC,SAASgB,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["components/MoviesPage/MoviesPage.js","services/movies-api.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport * as moviesAPI from 'services/movies-api';\n\nexport default function MoviesPage() {\n  const [searchMovie, setSearchMovie] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState('');\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (searchQuery) {\n      moviesAPI.fetchSearchMovies(searchQuery).then(movies => {\n        setSearchMovie([...movies.results]);\n      });\n    }\n  }, [searchQuery]);\n\n  const handleMovieChange = event => {\n    setQuery(event.currentTarget.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (query.trim() === '') {\n      setSearchMovie([]);\n      setSearchParams('');\n      return alert('Enter a search query');\n    }\n    setSearchParams({ query });\n\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={query}\n          onChange={handleMovieChange}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n        />\n\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n\n      {searchMovie && (\n        <ul>\n          {searchMovie.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`}>{title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '919ec07d97461f424c0dcb1ca8e5ed20';\n\nasync function fetchWithErrorHandling(url = '') {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchPopularFims() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n}\n\nexport function fetchSearchMovies(searchQuery) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n}\n\nexport function fetchMovieDetails(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchActors(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieReviews(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${movie_id}/reviews?api_key=${API_KEY}`\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["MoviesPage","useState","searchMovie","setSearchMovie","useSearchParams","searchParams","setSearchParams","query","setQuery","searchQuery","get","useEffect","moviesAPI","then","movies","results","onSubmit","event","preventDefault","trim","alert","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","map","id","title","to","BASE_URL","API_KEY","fetchWithErrorHandling","url","fetch","response","ok","json","Promise","reject","Error","fetchPopularFims","fetchSearchMovies","fetchMovieDetails","movie_id","fetchActors","fetchMovieReviews","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}